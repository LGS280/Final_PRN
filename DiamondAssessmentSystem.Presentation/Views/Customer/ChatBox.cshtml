@model int // conversationId

<div class="chatbox-container">
    <div class="chatbox-header">
        <span>Diamond Chat Support</span>
        <button class="chatbox-close-btn" onclick="closeChatBox()">✖</button>
    </div>

    <div id="chatbox-messages" class="chat-box">
        <!-- Render partial -->
        @await Html.PartialAsync("~/Views/Chat/_ChatMessageList.cshtml", ViewData["Messages"])
    </div>

    @await Html.PartialAsync("~/Views/Chat/_ChatBoxInput.cshtml", Model)
</div>

<script>
    function closeChatBox() {
        document.querySelector('.chatbox-container').style.display = 'none';
    }
</script>

@section Scripts {
    <script>
        const conversationId = '@Model'; // nếu là int Model
        const userRole = '@User?.FindFirst("role")?.Value';

        const connection = new signalR.HubConnectionBuilder()
            .withUrl(`/hub/chat?conversationId=${conversationId}`)
            .withAutomaticReconnect()
            .build();

        connection.start().then(() => {
            console.log('✅ SignalR connected.');
        }).catch(err => {
            console.error('❌ SignalR error:', err);
        });

        connection.on("ReceiveMessage", function (message) {
            const isMe = message.senderRole?.toLowerCase() === userRole?.toLowerCase();

            const wrapper = document.createElement("div");
            wrapper.className = "chat-message " + (isMe ? "me" : "other");

            const bubbleType = message.messageType === 0 ? "chat-bubble" : "chat-media-container";
            const content = document.createElement("div");
            content.className = bubbleType;

            const meta = `<div class="chat-meta">
                            <span class="chat-sender">${message.senderName}</span>
                            <span class="chat-time">${new Date(message.sentAt).toLocaleString()}</span>
                          </div>`;
            content.innerHTML = meta;

            if (message.messageType === 0) {
                const text = document.createElement("div");
                text.className = "chat-text";
                text.textContent = message.message;
                content.appendChild(text);
            } else if (message.messageType === 1) {
                const media = document.createElement("div");
                media.className = "media-wrapper";
                media.innerHTML = `
                    <img src="${message.filePath}" alt="${message.fileName}" class="chat-image" />
                    <a href="/ChatMessages/Download?conversationId=${message.conversationId}&chatId=${message.chatId}"
                       class="media-download-btn" title="Tải xuống" target="_blank">⭳</a>`;
                content.appendChild(media);
            } else if (message.messageType === 2) {
                const media = document.createElement("div");
                media.className = "media-wrapper";
                media.innerHTML = `
                    <video controls class="chat-video">
                        <source src="${message.filePath}" />
                        Trình duyệt không hỗ trợ video.
                    </video>
                    <a href="/ChatMessages/Download?conversationId=${message.conversationId}&chatId=${message.chatId}"
                       class="media-download-btn" title="Tải xuống" target="_blank">⭳</a>`;
                content.appendChild(media);
            } else {
                const link = document.createElement("div");
                link.className = "chat-file";
                link.innerHTML = `<a href="/ChatMessages/Download?conversationId=${message.conversationId}&chatId=${message.chatId}" class="file-link">${message.fileName}</a>`;
                content.appendChild(link);
            }

            wrapper.appendChild(content);

            const chatBox = document.getElementById("chatBox") || document.getElementById("chatbox-messages");
            chatBox.appendChild(wrapper);
            chatBox.scrollTop = chatBox.scrollHeight;
        });
    </script>
}
