// <auto-generated />
using System;
using DiamondAssessmentSystem.Infrastructure.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiamondAssessmentSystem.Infrastructure.Migrations
{
    [DbContext(typeof(DiamondAssessmentDbContext))]
    [Migration("20250623103102_AddApprovalFieldsToCertificate")]
    partial class AddApprovalFieldsToCertificate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("blog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<string>("BlogType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("blog_type");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_date");

                    b.HasKey("BlogId")
                        .HasName("PK__Blogs__2975AA28461437B8");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("certificate_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("certificate_number");

                    b.Property<DateTime?>("IssueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("issue_date");

                    b.Property<int>("ResultId")
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificateId")
                        .HasName("PK__Certific__E2256D3153E19E06");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("ResultId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.ChatLog", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"));

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("message_type");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.HasKey("ChatId")
                        .HasName("PK__ChatLogs__FD040B175AFF3BC5");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RequestId");

                    b.ToTable("ChatLogs");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.CommitmentRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("record_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("approved_date");

                    b.Property<DateOnly>("CommitDate")
                        .HasColumnType("date")
                        .HasColumnName("commit_date");

                    b.Property<string>("CommitmentReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("commitment_reason");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("RecordId")
                        .HasName("PK__Commitme__BFCFB4DDB991787C");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("Commitment_records", (string)null);
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("address");

                    b.Property<decimal?>("Idcard")
                        .HasColumnType("numeric(20, 0)")
                        .HasColumnName("IDcard");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("tax_code");

                    b.Property<string>("UnitName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("unit_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__CD65CB85428BDAEC");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__C52E0BA8D6606125");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("order_date");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("total_price");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__46596229F2D54AB0");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("amount");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("method");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__ED1FC9EAE8D291C7");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("request_date");

                    b.Property<string>("RequestType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("request_type");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("RequestId")
                        .HasName("PK__Requests__18D3B90F425A5378");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("result_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"));

                    b.Property<decimal>("CaratWeight")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("carat_weight");

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clarity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Cut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cut");

                    b.Property<int>("DiamondId")
                        .HasColumnType("int")
                        .HasColumnName("diamond_id");

                    b.Property<string>("DiamondOrigin")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("diamond_origin");

                    b.Property<string>("Fluorescence")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fluorescence");

                    b.Property<string>("Measurements")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("measurements");

                    b.Property<string>("Polish")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("polish");

                    b.Property<string>("Proportions")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("proportions");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shape");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Symmetry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("symmetry");

                    b.HasKey("ResultId")
                        .HasName("PK__Results__AFB3C316E0E04CA2");

                    b.HasIndex("RequestId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.SealingRecord", b =>
                {
                    b.Property<int>("SealingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("sealing_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SealingId"));

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int")
                        .HasColumnName("approved_by");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("approved_date");

                    b.Property<int>("RequestId")
                        .HasColumnType("int")
                        .HasColumnName("request_id");

                    b.Property<DateTime>("SealDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("seal_date");

                    b.Property<string>("SealingReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("sealing_reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("SealingId")
                        .HasName("PK__Sealing___B2156BB833332E8B");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("RequestId");

                    b.ToTable("Sealing_records", (string)null);
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.ServicePrice", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("price");

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("service_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service___3E0DB8AFC9383DFD");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Service_prices", (string)null);
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.ServicePriceAudit", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("audit_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuditId"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("action_type");

                    b.Property<DateTime>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("change_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int?>("NewDuration")
                        .HasColumnType("int")
                        .HasColumnName("new_duration");

                    b.Property<decimal?>("NewPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("new_price");

                    b.Property<int?>("OldDuration")
                        .HasColumnType("int")
                        .HasColumnName("old_duration");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("old_price");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("service_id");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("service_type");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.HasKey("AuditId")
                        .HasName("PK__Service___5AF33E33214B811D");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Service_price_audit", (string)null);
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Point")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Blog", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "Employee")
                        .WithMany("Blogs")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Blogs__employee___6EF57B66");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Certificate", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "ApprovedByEmployee")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Result", "Result")
                        .WithMany("Certificates")
                        .HasForeignKey("ResultId")
                        .IsRequired()
                        .HasConstraintName("FK__Certifica__resul__5812160E");

                    b.Navigation("ApprovedByEmployee");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.ChatLog", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Customer", "Customer")
                        .WithMany("ChatLogs")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__ChatLogs__custom__72C60C4A");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "Employee")
                        .WithMany("ChatLogs")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__ChatLogs__employ__73BA3083");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Request", "Request")
                        .WithMany("ChatLogs")
                        .HasForeignKey("RequestId")
                        .HasConstraintName("FK__ChatLogs__reques__71D1E811");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.CommitmentRecord", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "ApprovedByNavigation")
                        .WithMany("CommitmentRecords")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK__Commitmen__appro__5BE2A6F2");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Request", "Request")
                        .WithMany("CommitmentRecords")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__Commitmen__reque__5AEE82B9");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Customer", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("DiamondAssessmentSystem.Infrastructure.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Customer_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Employee", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("DiamondAssessmentSystem.Infrastructure.Models.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Order", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__customer__6754599E");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.ServicePrice", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Orders__service___68487DD7");

                    b.Navigation("Customer");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Payment", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__order___6B24EA82");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Request", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Customer", "Customer")
                        .WithMany("Requests")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Requests__custom__5070F446");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "Employee")
                        .WithMany("Requests")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Requests__employ__5165187F");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.ServicePrice", "Service")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__Requests__servic__52593CB8");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Result", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Request", "Request")
                        .WithMany("Results")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__Results__request__5535A963");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.SealingRecord", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "ApprovedByNavigation")
                        .WithMany("SealingRecords")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK__Sealing_r__appro__5FB337D6");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Request", "Request")
                        .WithMany("SealingRecords")
                        .HasForeignKey("RequestId")
                        .IsRequired()
                        .HasConstraintName("FK__Sealing_r__reque__5EBF139D");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.ServicePrice", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "Employee")
                        .WithMany("ServicePrices")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Service_p__emplo__4D94879B");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.ServicePriceAudit", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.Employee", "Employee")
                        .WithMany("ServicePriceAudits")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Service_p__emplo__6383C8BA");

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.ServicePrice", "Service")
                        .WithMany("ServicePriceAudits")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Service_p__servi__6477ECF3");

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DiamondAssessmentSystem.Infrastructure.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Customer", b =>
                {
                    b.Navigation("ChatLogs");

                    b.Navigation("Orders");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Employee", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("ChatLogs");

                    b.Navigation("CommitmentRecords");

                    b.Navigation("Requests");

                    b.Navigation("SealingRecords");

                    b.Navigation("ServicePriceAudits");

                    b.Navigation("ServicePrices");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Order", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Request", b =>
                {
                    b.Navigation("ChatLogs");

                    b.Navigation("CommitmentRecords");

                    b.Navigation("Results");

                    b.Navigation("SealingRecords");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.Result", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.ServicePrice", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Requests");

                    b.Navigation("ServicePriceAudits");
                });

            modelBuilder.Entity("DiamondAssessmentSystem.Infrastructure.Models.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
